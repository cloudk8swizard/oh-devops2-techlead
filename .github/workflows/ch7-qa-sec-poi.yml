name: POI CICD - Ch5-BlueGreenDeployment

# Variables used in the jobs
env:
  registry:  openhackflo1xyl7acr.azurecr.io
  repository:  devopsoh/api-poi
  docker_path: apis/poi/web
  webapp_name:  openhackflo1xyl7poi
  poi_path: apis/poi/**
  staging_url: https://openhackflo1xyl7poi-staging.azurewebsites.net
  prod_url: https://openhackflo1xyl7poi.azurewebsites.net
  resource_group: openhackflo1xyl7rg
  build_name: POI

# If you want to trigger this branch then change the branch name to a usable branch name
on:
  push:
    branches: [ openhack_refresh ]
    paths: 
      - apis/poi/**
      - .github/workflows/ch7-qa-sec-poi.yml
  pull_request:
   branches: [ openhack_refresh ]
   paths: 
    - apis/poi/**
    - .github/workflows/ch7-qa-sec-poi.yml

jobs:

  # CI Phase - BUILD AND TEST CODE CHANGES
  build_and_test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      # If you want to specify a specific DOTNET version you may uncomment this line. It is not needed.
      #with:
      #  dotnet-version: '3.1.202'
    - name: Add Code Coverage Tools
      working-directory: apis/poi/tests/UnitTests
      run: dotnet add package coverlet.msbuild

    - name: Install dependencies
      run: dotnet restore apis/poi/web/*.csproj
      
    - name: .NET Build Web
      run: dotnet build --configuration Release --no-restore apis/poi/web/*.csproj

    - name: .NET Build Unit Tests
      run: dotnet build --configuration Release apis/poi/tests/UnitTests/UnitTests.csproj

    - name: .NET Test
      run: dotnet test --no-restore --verbosity normal apis/poi/tests/UnitTests  /p:CollectCoverage=true /p:CoverletOutput=lcov/ /p:CoverletOutputFormat=lcov
    
    - name: Coveralls
      uses: coverallsapp/github-action@master
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        path-to-lcov: apis/poi/tests/UnitTests/lcov/coverage.info
        base-path: apis/poi
        flag-name: Unit

    - name: Create Issue
      uses: actions/github-script@0.9.0
      if: failure()
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          let body = "${{ env.build_name }} Worflow Failure \n Build Number: ${{ github.run_number }} \n Build Log: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }} \n SHA: [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }}) \n";
          github.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: "${{ env.build_name }} Workflow ${{ github.run_number }} Failed! ",
            body: body
          });
          
  # CD Phase 2 - 1 - PUSH TO ACR
  docker_build_and_push:
    if: github.ref == 'refs/heads/openhack_refresh'
    runs-on: ubuntu-latest
    needs: build_and_test
    steps:     
    - uses: actions/checkout@v2

    - name: Docker login     
      run: docker login $registry -u ${{ secrets.ACR_USER }} -p ${{ secrets.ACR_KEY }}

    - name: Docker build
      run: docker build -t $registry/$repository:${{github.run_number}} --build-arg build_version=${{github.run_number}} $docker_path

    - name: Docker Push
      run: docker push $registry/$repository:${{github.run_number}}  
    
    - name: Create Issue
      uses: actions/github-script@0.9.0
      if: failure()
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          let body = "${{ env.build_name }} Worflow Failure \n Build Number: ${{ github.run_number }} \n Build Log: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }} \n SHA: [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }}) \n";
          github.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: "${{ env.build_name }} Workflow ${{ github.run_number }} Failed! ",
            body: body
          });

  # CD Phase 2 - 2  - PUSH NEW CODE FROM ACR TO WEBAPP STAGING SLOT
  deploy_staging:
    if: github.ref == 'refs/heads/openhack_refresh'
    runs-on: ubuntu-latest
    needs: docker_build_and_push
    steps:
    - name: Azure authentication
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS  }}

    - name: Azure WebApp
      uses: Azure/webapps-deploy@v2
      with:
        app-name: ${{ env.webapp_name }}
        slot-name: staging
        images: ${{ env.registry }}/${{ env.repository }}:${{github.run_number}}
  
    - name: Create Issue
      uses: actions/github-script@0.9.0
      if: failure()
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          let body = "${{ env.build_name }} Worflow Failure \n Build Number: ${{ github.run_number }} \n Build Log: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }} \n SHA: [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }}) \n";
          github.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: "${{ env.build_name }} Workflow ${{ github.run_number }} Failed! ",
            body: body
          });

  # CD Phase 3 - 1 - VALIDATE WEBAPP STAGING SLOT HTTP STATUS
  validate_staging:
    if: github.ref == 'refs/heads/openhack_refresh'
    runs-on: ubuntu-latest
    needs: deploy_staging
    steps:
    - uses: actions/checkout@v2

    - name: Run Validation script
      run: |
        pwd
        ls -la
        chmod +x poihttp.sh
        ./poihttp.sh

    - name: Create Issue
      uses: actions/github-script@0.9.0
      if: failure()
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          let body = "${{ env.build_name }} Worflow Failure \n Build Number: ${{ github.run_number }} \n Build Log: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }} \n SHA: [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }}) \n";
          github.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: "${{ env.build_name }} Workflow ${{ github.run_number }} Failed! ",
            body: body
          });

  # CD Phase 7 - LOAD TESTING WITH K6
  k6_cloud_test:
    if: github.ref == 'refs/heads/openhack_refresh'
    name: k6 cloud test run
    runs-on: ubuntu-latest
    needs: validate_staging
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Run k6 cloud test
        uses: k6io/action@v0.1
        with:
          filename: test.js
          cloud: true
          token: ${{ secrets.K6_CLOUD_API_TOKEN }}

  # CD Phase 3 - 2 - SWAP SLOTS FROM STAGING TO PRODUCTION
  swap_slots:
    if: github.ref == 'refs/heads/openhack_refresh'
    runs-on: ubuntu-latest
    needs: k6_cloud_test
    steps:
    - name: Azure authentication
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS  }}

    - name: Swap staging to production
      run: |
        az webapp deployment slot swap --name $webapp_name --resource-group $resource_group --slot staging --target-slot production
  
    - name: Create Issue
      uses: actions/github-script@0.9.0
      if: failure()
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          let body = "${{ env.build_name }} Worflow Failure \n Build Number: ${{ github.run_number }} \n Build Log: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }} \n SHA: [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }}) \n";
          github.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: "${{ env.build_name }} Workflow ${{ github.run_number }} Failed! ",
            body: body
          });

  # CD Phase 3 - 3 - VALIDATE WEBAPP PRODUCTION SLOT HTTP STATUS
  validate_production:
    if: github.ref == 'refs/heads/openhack_refresh'
    runs-on: ubuntu-latest
    needs: swap_slots
    steps:
    - uses: actions/checkout@v2

    - name: Run Validation script
      run: |
        pwd
        ls -la
        chmod +x prod-poi-http.sh
        ./prod-poi-http.sh

    - name: Create Issue
      uses: actions/github-script@0.9.0
      if: failure()
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          let body = "${{ env.build_name }} Worflow Failure \n Build Number: ${{ github.run_number }} \n Build Log: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }} \n SHA: [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }}) \n";
          github.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: "${{ env.build_name }} Workflow ${{ github.run_number }} Failed! ",
            body: body
          });

  # CD Phase 4 - 1 - ROLLBACK IN CASE THE PRODUCTION SLOT FAILS VALIDATION
  roll_back:
    if: failure()
    runs-on: ubuntu-latest
    needs: validate_production
    steps:
    - name: Azure authentication
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS  }}

    - name: Swap production and staging
      run: |
        az webapp deployment slot swap --name $webapp_name --resource-group $resource_group --slot staging --target-slot production 

